#include<iostream>
using namespace std;
int merge(int *a,int s,int e)
{
    int mid=(s+e)/2;
    int i=s;
    int j=(mid+1);
    int k=s;
    int temp[100000];
    int cnt=0;       //cross inversionsa
    
    while(i<=mid and j<=e)
    {
        if(a[i]<=a[j])
        {
            temp[k]=a[i];
            k++;
            i++;
        }
        else
        {
            temp[k++]=a[j++];
            cnt+=mid-i+1;
        }
    }
    //fill the array if some elements are left in one of the arrays
    while(i<=mid)
    {
        temp[k++]=a[i++];
    }
    while(j<=e)
    {
        temp[k++]=a[j++];
    }
    
    //copy all elements back to array
    for(int i=s;i<=e;i++)
{
    a[i]=temp[i];
}    return cnt;
}
int inv(int *a,int s,int e)
{
    //base case
    if(s>=e)
    {
        return 0;
    }
    
    int mid=(s+e)/2;   //merge sort
    int x=inv(a,s,mid);
    int y=inv(a,mid+1,e);
    int z=merge(a,s,e);     //cross inversion
    return x+y+z;
    
    
}
int main()
{
    int a[]={1,5,2,6,3,0};
    int n=sizeof(a)/sizeof(int);
    int ans=inv(a,0,n-1);
    cout<<ans<<endl;
    return 0;
}
