#include<iostream>
using namespace std;
bool rat(char maze[10][10],int soln[][10],int i,int j,int m,int n)
{
    if(i==m && j==n)
    {
        soln[m][n]=1;
        //print the path
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                cout<<soln[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
        return true;
    }
    
    //rat should be inside grid
    if(i>m || j>n)
    {
        return false;
    }
    
    ////rasta block ho
if(maze[i][j]=='X')
{
    return false;
}

//otherwise assume sol exists through current cell
 soln[i][j]=1;
 
 //recursive case
 bool rightSuccess=rat(maze,soln,i,j+1,m,n);
 bool downSuccess=rat(maze,soln,i+1,j,m,n);
 
 //backtracking
 soln[i][j]=0; 
 
 if(rightSuccess || downSuccess)
 {
     return true;
 }
 return false;
 
}
int main()
{
    char maze[10][10]={
        "0000",
        "00X0",
        "0X00",
        "000X",
    };
    int soln[10][10]={0};
    int m=4;
    int n=4;
    bool ans= rat(maze,soln,0,0,m-1,n-1);
    if(ans==false)
    {
        cout<<"path nt exists";
    }
    return 0;
}
